// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stats_service_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsServiceV1Client is the client API for StatsServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsServiceV1Client interface {
	StartMonitoring(ctx context.Context, in *StartMonitoringRequest, opts ...grpc.CallOption) (StatsServiceV1_StartMonitoringClient, error)
}

type statsServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStatsServiceV1Client(cc grpc.ClientConnInterface) StatsServiceV1Client {
	return &statsServiceV1Client{cc}
}

func (c *statsServiceV1Client) StartMonitoring(ctx context.Context, in *StartMonitoringRequest, opts ...grpc.CallOption) (StatsServiceV1_StartMonitoringClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatsServiceV1_ServiceDesc.Streams[0], "/stats_service_v1.StatsServiceV1/StartMonitoring", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsServiceV1StartMonitoringClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatsServiceV1_StartMonitoringClient interface {
	Recv() (*StartMonitoringResponse, error)
	grpc.ClientStream
}

type statsServiceV1StartMonitoringClient struct {
	grpc.ClientStream
}

func (x *statsServiceV1StartMonitoringClient) Recv() (*StartMonitoringResponse, error) {
	m := new(StartMonitoringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatsServiceV1Server is the server API for StatsServiceV1 service.
// All implementations must embed UnimplementedStatsServiceV1Server
// for forward compatibility
type StatsServiceV1Server interface {
	StartMonitoring(*StartMonitoringRequest, StatsServiceV1_StartMonitoringServer) error
	mustEmbedUnimplementedStatsServiceV1Server()
}

// UnimplementedStatsServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStatsServiceV1Server struct {
}

func (UnimplementedStatsServiceV1Server) StartMonitoring(*StartMonitoringRequest, StatsServiceV1_StartMonitoringServer) error {
	return status.Errorf(codes.Unimplemented, "method StartMonitoring not implemented")
}
func (UnimplementedStatsServiceV1Server) mustEmbedUnimplementedStatsServiceV1Server() {}

// UnsafeStatsServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServiceV1Server will
// result in compilation errors.
type UnsafeStatsServiceV1Server interface {
	mustEmbedUnimplementedStatsServiceV1Server()
}

func RegisterStatsServiceV1Server(s grpc.ServiceRegistrar, srv StatsServiceV1Server) {
	s.RegisterService(&StatsServiceV1_ServiceDesc, srv)
}

func _StatsServiceV1_StartMonitoring_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartMonitoringRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServiceV1Server).StartMonitoring(m, &statsServiceV1StartMonitoringServer{stream})
}

type StatsServiceV1_StartMonitoringServer interface {
	Send(*StartMonitoringResponse) error
	grpc.ServerStream
}

type statsServiceV1StartMonitoringServer struct {
	grpc.ServerStream
}

func (x *statsServiceV1StartMonitoringServer) Send(m *StartMonitoringResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StatsServiceV1_ServiceDesc is the grpc.ServiceDesc for StatsServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats_service_v1.StatsServiceV1",
	HandlerType: (*StatsServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartMonitoring",
			Handler:       _StatsServiceV1_StartMonitoring_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
