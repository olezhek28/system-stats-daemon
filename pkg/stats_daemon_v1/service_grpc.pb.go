// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stats_daemon_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsDaemonV1Client is the client API for StatsDaemonV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsDaemonV1Client interface {
	// Возвращает срез статистики за определенный период
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type statsDaemonV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStatsDaemonV1Client(cc grpc.ClientConnInterface) StatsDaemonV1Client {
	return &statsDaemonV1Client{cc}
}

func (c *statsDaemonV1Client) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/stats_daemon_v1.StatsDaemonV1/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsDaemonV1Server is the server API for StatsDaemonV1 service.
// All implementations must embed UnimplementedStatsDaemonV1Server
// for forward compatibility
type StatsDaemonV1Server interface {
	// Возвращает срез статистики за определенный период
	GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error)
	mustEmbedUnimplementedStatsDaemonV1Server()
}

// UnimplementedStatsDaemonV1Server must be embedded to have forward compatible implementations.
type UnimplementedStatsDaemonV1Server struct {
}

func (UnimplementedStatsDaemonV1Server) GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedStatsDaemonV1Server) mustEmbedUnimplementedStatsDaemonV1Server() {}

// UnsafeStatsDaemonV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsDaemonV1Server will
// result in compilation errors.
type UnsafeStatsDaemonV1Server interface {
	mustEmbedUnimplementedStatsDaemonV1Server()
}

func RegisterStatsDaemonV1Server(s grpc.ServiceRegistrar, srv StatsDaemonV1Server) {
	s.RegisterService(&StatsDaemonV1_ServiceDesc, srv)
}

func _StatsDaemonV1_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsDaemonV1Server).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats_daemon_v1.StatsDaemonV1/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsDaemonV1Server).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StatsDaemonV1_ServiceDesc is the grpc.ServiceDesc for StatsDaemonV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsDaemonV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats_daemon_v1.StatsDaemonV1",
	HandlerType: (*StatsDaemonV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStats",
			Handler:    _StatsDaemonV1_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats_daemon_v1/service.proto",
}
